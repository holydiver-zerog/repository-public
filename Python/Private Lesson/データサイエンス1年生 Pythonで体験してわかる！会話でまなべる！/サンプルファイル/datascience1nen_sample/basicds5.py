# -*- coding: utf-8 -*-
"""BasicDS5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IFId9yIFXx3Dyje03WUuzttb1UJxXCRV

# **【第5章】 データサイエンスの実践1：アイスクリーム売上分析**

## 02 どんなデータが必要だろう？

リスト5-1
"""

!pip install japanize-matplotlib
import pandas as pd
import numpy as np
import japanize_matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(font=["IPAexGothic"])

"""リスト5-2"""

df = pd.read_csv('icecream_sales.csv')
df.head()

"""リスト5-3"""

df.info()

"""## 03 データからわかることは？

リスト5-4
"""

df.describe()

"""リスト5-5"""

df[["値段"]].boxplot()
plt.title("値段")
plt.show()

"""リスト5-6"""

# 欠損値を含んでいる行を削除
df.dropna(inplace=True)

# 外れ値の行を削除
lower_bound = 300
upper_bound = 400
df = df[(df["値段"] >= lower_bound) & (df["値段"] <= upper_bound)]

df.describe()

"""リスト5-7"""

df[["値段"]].boxplot()
plt.title("値段")
plt.show()

"""リスト5-8"""

df["日付"] = pd.to_datetime(df["日付"])

column_name = "日付"

# ヒストグラムの作成
plt.figure(figsize=(10, 6))
plt.hist(df[column_name], bins=365)

plt.xlabel(column_name)
plt.ylabel("販売数")
plt.title(f"{column_name}ごとのアイスクリームの販売数")
plt.tight_layout()
plt.show()

"""リスト5-9"""

# 日付ごとに気温の平均を計算
temps = df.groupby('日付')['気温'].mean()

# 日付と気温の折れ線グラフを作成
plt.figure(figsize=(10, 6))
plt.plot(temps.index, temps.values, marker='o')

plt.xlabel("日付")
plt.ylabel("気温")
plt.title("日付ごと気温")
plt.tight_layout()
plt.show()

"""リスト5-10"""

column_name = "気温"

# ヒストグラムの作成
plt.figure(figsize=(10, 6))
plt.hist(df[column_name], bins=20)

plt.xlabel(column_name)
plt.ylabel("販売数")
plt.title(f"{column_name}ごとのアイスクリームの販売数")
plt.tight_layout()
plt.show()

"""リスト5-11"""

column_name = "年齢"

# ヒストグラムの作成
plt.figure(figsize=(10, 6))
plt.hist(df[column_name], bins=[10,20,30,40,50,60,70])

plt.xlabel(column_name)
plt.ylabel("販売数")
plt.title(f"{column_name}ごとのアイスクリームの販売数")
plt.tight_layout()
plt.show()

"""リスト5-12"""

column_name = "曜日"

# カテゴリーのヒストグラムの作成
plt.figure(figsize=(10, 6))
num_categories = df[column_name].nunique()
bins = np.arange(-0.5, num_categories + 0.5, 1)
plt.hist(df[column_name], bins=bins)

plt.xlabel(column_name)
plt.ylabel("販売数")
plt.title(f"{column_name}ごとのアイスクリームの販売数")
plt.xticks(ticks=[0, 1, 2, 3, 4, 5, 6], labels=["月", "火", "水", "木", "金", "土", "日"])
plt.tight_layout()
plt.show()

"""リスト5-13"""

column_name = "味"

# カテゴリーのヒストグラムの作成
plt.figure(figsize=(10, 6))
num_categories = df[column_name].nunique()
bins = np.arange(-0.5, num_categories + 0.5, 1)
plt.hist(df[column_name], bins=bins)

plt.xlabel(column_name)
plt.ylabel("販売数")
plt.title(f"{column_name}ごとのアイスクリームの販売数")
plt.tight_layout()
plt.show()

"""リスト5-14"""

column_name = "性別"

# カテゴリーのヒストグラムの作成
plt.figure(figsize=(10, 6))
num_categories = df[column_name].nunique()
bins = np.arange(-0.5, num_categories + 0.5, 1)
plt.hist(df[column_name], bins=bins)

plt.xlabel(column_name)
plt.ylabel("販売数")
plt.title(f"{column_name}ごとのアイスクリームの販売数")
plt.tight_layout()
plt.show()

"""---

リスト5-15
"""

# 日付ごとの販売数と、その日の平均気温を取得
sales = df.groupby('日付').size()
temps = df.groupby('日付')['気温'].mean()

temp_sales = pd.DataFrame({
    "販売数": sales,
    "気温": temps
})

# 散布図を表示
plt.figure(figsize=(10, 6))
plt.scatter(temps, sales)

plt.xlabel("気温")
plt.ylabel("販売数")
plt.title("気温と1日のアイスクリーム販売数")
plt.tight_layout()
plt.show()

"""リスト5-16"""

# データを平日と週末に分ける
df_weekdays = df[df["曜日"].isin([0, 1, 2, 3, 4])]
df_weekends = df[df["曜日"].isin([5, 6])]

# 日付ごとの販売数と、その日の平均気温を取得（平日、週末）
sales0 = df_weekdays.groupby("日付").size()
temps0 = df_weekdays.groupby("日付")["気温"].mean()
sales1 = df_weekends.groupby("日付").size()
temps1 = df_weekends.groupby("日付")["気温"].mean()

# 平日と週末の散布図を表示
plt.figure(figsize=(10, 6))
plt.scatter(temps0, sales0, label="平日", color='blue')
plt.scatter(temps1, sales1, label="週末", color='red')

plt.xlabel("気温")
plt.ylabel("販売数")
plt.title("気温と1日のアイスクリーム販売数（平日 vs 週末）")
plt.legend()
plt.tight_layout()
plt.show()

"""リスト5-17"""

# データを1〜11月と12月に分ける
df_1_11 = df[df["日付"].dt.month.isin(range(1, 12))]
df_12 = df[df["日付"].dt.month.isin(range(12, 13))]

# 日付ごとに販売数と、その日の平均気温を取得（1-11月、12月）
sales0 = df_1_11.groupby('日付').size()
temps0 = df_1_11.groupby('日付')['気温'].mean()
sales1 = df_12.groupby('日付').size()
temps1 = df_12.groupby('日付')['気温'].mean()

# 散布図を表示
plt.figure(figsize=(10, 6))
plt.scatter(temps0, sales0, label="1〜11月", color='blue')
plt.scatter(temps1, sales1, label="12月", color='red')

plt.xlabel("気温")
plt.ylabel("販売数")
plt.title("気温と1日のアイスクリーム販売数（1〜11月 vs 12月）")
plt.legend()
plt.tight_layout()
plt.show()

"""リスト5-18"""

# 味ごとの年齢の分布を箱ひげ図で表示
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x="味", y="年齢")

plt.xlabel("味")
plt.ylabel("年齢")
plt.title("味ごとの年齢の分布")
plt.tight_layout()
plt.show()

"""リスト5-19"""

# 年齢を3つの区分に分ける
age_names = ["29歳以下", "30〜49歳", "50歳以上"]
df["年代"] = pd.cut(df["年齢"], bins=[0, 30, 50, 100], labels=age_names)

# 年代ごとの人数をヒストグラムで表示
plt.figure(figsize=(10, 6))
plt.hist(df["年代"])

plt.xlabel("年代")
plt.ylabel("販売数")
plt.title("年代ごとのアイスクリームの販売数")

plt.tight_layout()
plt.show()

"""リスト5-20"""

cross_tab = pd.crosstab(df["年代"], df["味"])
cross_tab

"""リスト5-21"""

column_name = "味"

# 年代別に、味ごとの販売数のヒストグラムを作成
for select_group in age_names:
    plt.figure(figsize=(10, 6))
    subset = df[df["年代"] == select_group]
    num_categories = subset[column_name].nunique()
    bins = np.arange(-0.5, num_categories + 0.5, 1)
    plt.hist(subset[column_name], bins=bins)

    plt.xlabel(column_name)
    plt.ylabel("販売数")
    plt.title(f"{select_group}で、{column_name}ごとのアイスクリームの販売数")
    plt.tight_layout()
    plt.show()

"""## 04 本当にそうだろうか？

### 仮説1：気温が高い日は売り上げが増える。

リスト5-22
"""

# データを1〜11月と12月に分ける
df_1_11 = df[df["日付"].dt.month.isin(range(1, 12))]
# データを平日のみにする
df_weekdays = df_1_11[df_1_11["曜日"].isin([0, 1, 2, 3, 4])]

# 日付ごとの販売数と、その日の平均気温を取得（平日）
sales = df_weekdays.groupby("日付").size()
temps = df_weekdays.groupby("日付")["気温"].mean()

temp_sales = pd.DataFrame({
    "販売数": sales,
    "気温": temps
})

# 散布図と回帰直線を描画
plt.figure(figsize=(10, 6))
sns.regplot(x="気温", y="販売数", data=temp_sales)

plt.title("気温と1日のアイスクリーム販売数（1〜11月の平日）")
plt.tight_layout()
plt.show()

"""リスト5-23"""

import statsmodels.api as sm

X = temp_sales["気温"]
y = temp_sales["販売数"]

# 最小二乗法でモデルを作る
X = sm.add_constant(X)
model = sm.OLS(y, X).fit()

# 結果を取得
p_value = model.pvalues["気温"]
coef = model.params["気温"]

# 結果の表示
print(f"p値：{p_value:.4f}")
print(f"傾き：{coef:.4f}")

# 結果の解釈
alpha = 0.05
if p_value < alpha:
    print("有意差あり：気温が販売数に与える影響は、統計的に有意です。")
    if coef > 0:
        print("気温が高いほど、販売数が増加する傾向があります。")
    else:
        print("気温が高いほど、販売数が減少する傾向があります。")
else:
    print("有意差なし：気温が販売数に与える影響は、統計的に有意ではありません。")

"""リスト5-24"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 既存のデータを使用（temp_sales はすでに作成済み）
X = temp_sales[["気温"]]
y = temp_sales["販売数"]

# データを訓練セットとテストセットに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# モデルの作成と訓練
model = LinearRegression()
model.fit(X_train, y_train)

# テストデータでの予測
y_pred = model.predict(X_test)

# モデルの評価
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

# 評価結果の表示
print("モデルの評価結果:")
print(f"このモデルの決定係数（R²）は、{r2:.2f}なので、")
if r2 > 0.8:
    print("かなり良い当てはまりです。")
elif r2 > 0.6:
    print("まあまあの当てはまりです。")
else:
    print("あまり良い当てはまりとは言えません。")
print(f"平均二乗誤差（MSE）: {mse:.2f}")
print(f"決定係数（R-squared）: {r2:.2f}")

"""リスト5-25"""

new_temp = 25 # 明日の気温（仮の値）
new_data = pd.DataFrame({"気温":[new_temp] })
pre_sales = model.predict(new_data)[0]
print(f"気温が{new_temp}度の場合、予測される販売数は約{pre_sales:.0f}個です。")

"""### 仮説2：週末は平日より売り上げが増える。

リスト5-26
"""

from scipy import stats

# 1.平日と週末にデータを分ける
df_weekdays = df[df["曜日"].isin([0, 1, 2, 3, 4])]
df_weekends = df[df["曜日"].isin([5, 6])]

# 2.各グループ（平日、週末）の販売数を集計する
sales_weekdays = df_weekdays.groupby("日付").size()
sales_weekends = df_weekends.groupby("日付").size()

print("平日販売数:",sales_weekdays.sum())
print("週末販売数:",sales_weekends.sum())

# 3.平日と週末の販売数の平均を比較するためのt検定を行う
t_stat, p_value = stats.ttest_ind(sales_weekends, sales_weekdays)

# p値の表示
print(f"\nt検定量：{t_stat}")
print(f"p値：{p_value:.4f}")

# 検定結果の解釈
alpha = 0.05
if p_value < alpha:
    print("有意差あり：週末の平均販売数は、平日と週末で有意な差があります。")
else:
    print("有意差なし：週末の平均販売数は、平日と週末で有意な差はありません。")

"""### 仮説3：年代別（25歳以下、25〜50歳、50歳以上）で、好まれる味が違う。

リスト5-27
"""

from scipy.stats import chi2_contingency

cross_tab = pd.crosstab(df["年代"], df["味"])
print(cross_tab)

# カイ二乗検定の実施
chi2, p_value, dof, ex = chi2_contingency(cross_tab)

# 結果の表示
print(f"\nカイ二乗統計量：{chi2}")
print(f"p値：{p_value:.4f}")

# 結果の解釈
alpha = 0.05
if p_value < alpha:
    print("有意差あり：年代と味に、有意な関係があります。")
else:
    print("有意差なし：年代と味に、有意な関係はありません。")

"""リスト5-28"""

cross_tab = pd.crosstab(df["気温"], df["味"])

# カイ二乗検定の実施
chi2, p_value, dof, ex = chi2_contingency(cross_tab)

# 結果の表示
print(f"カイ二乗統計量：{chi2}")
print(f"p値：{p_value:.4f}")

# 結果の解釈
alpha = 0.05
if p_value < alpha:
    print("有意差あり：気温と味に、有意な関係があります。")
else:
    print("有意差なし：気温と味に、有意な関係はありません。")

"""### 仮説4：気温が低くても、クリスマスの時期は売り上げが増える。

リスト5-29
"""

# 1.1月と12月にデータを分ける
df_01 = df[df["日付"].dt.month == 1]
df_12 = df[df["日付"].dt.month == 12]

# 2.各グループ（1月、12月）の販売数を集計する
sales_01 = df_01.groupby('日付').size()
sales_12 = df_12.groupby('日付').size()

# 3.1月と12月の販売数の平均を比較するためのt検定を行う
t_stat, p_value = stats.ttest_ind(sales_12, sales_01)

# 結果を表示
print(f"t統計量: {t_stat}")
print(f"p値: {p_value:.4f}")

# p値に基づく結果の解釈
if p_value < 0.05:
    print("有意差あり: 1月と12月の間で販売数に、有意な差があります。")
else:
    print("有意差なし: 1月と12月の間で販売数に、有意な差はありません。")