# -*- coding: utf-8 -*-
"""DLtest5-03 CNNでカラー画像（cifar10）の学習.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nhJfjPFYmHaKfgCxFXe-diGAfX3Xi-vY

# **5.03 CNNでカラー画像（cifar10）の学習**

# 【データの準備と確認】

リスト5-15：（リストA）
"""

!pip install japanize-matplotlib
import japanize_matplotlib
import matplotlib.pyplot as plt
import numpy as np
import keras
from keras import layers

"""リスト5-16"""

from keras.datasets import cifar10
(x_train, y_train),(x_test, y_test) = cifar10.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

print(f"学習データ（問題画像）　：{x_train.shape}")
print(f"テストデータ（問題画像）：{x_test.shape}")

"""リスト5-17"""

class_names = ["飛行機", "自動車", "鳥", "ネコ", "シカ",
               "イヌ", "カエル", "ウマ", "船", "トラック"]

"""# 【モデルを作って学習】

リスト5-18
"""

model = keras.models.Sequential()
model.add(layers.Conv2D(32, (5, 5), activation="relu", input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Dropout(0.2))
model.add(layers.Conv2D(64, (5, 5), activation="relu"))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Dropout(0.2))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dropout(0.2))
model.add(layers.Dense(32, activation="relu"))
model.add(layers.Dense(10, activation="softmax"))
model.summary(line_length=120)

"""リスト5-19（リストB’）"""

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])
history = model.fit(x_train, y_train, epochs=20, #20
                    validation_data=(x_test, y_test))
test_loss, test_acc =model.evaluate(x_test, y_test)
print(f"テストデータの正解率は{test_acc:.2%}です。")

"""リスト5-20：（リストC）"""

param = [["正解率", "accuracy", "val_accuracy"],
          ["誤差", "loss", "val_loss"]]
plt.figure(figsize=(10,4))
for i in range(2):
    plt.subplot(1, 2, i+1)
    plt.title(param[i][0])
    plt.plot(history.history[param[i][1]], "o-")
    plt.plot(history.history[param[i][2]], "o-")
    plt.xlabel("学習回数")
    plt.legend(["訓練","テスト"], loc="best")
    if i==0:
        plt.ylim([0,1])
plt.show()

"""# 【データを渡して予測】

リスト5-21
"""

pre = model.predict(x_test)

plt.figure(figsize=(12,10))
for i in range(20):
    plt.subplot(4,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(x_test[i])

    index = np.argmax(pre[i])
    pct = pre[i][index]
    ans = ""
    if index != y_test[i]:
        ans = "x--o["+class_names[y_test[i][0]]+"]"
    lbl = f"{class_names[index]} ({pct:.0%}){ans}"
    plt.xlabel(lbl)
plt.show()

"""# 【中間層を視覚化】

リスト5-22
"""

hidden_layers = []
for i, val in enumerate(model.layers):
    print(f"{i} : {val.name}")
    hidden_layers.append(val.output)

hidden_model = keras.models.Model(inputs=model.inputs, outputs=hidden_layers)
outputs = hidden_model.predict(x_test)

"""リスト5-23"""

i = 10
plt.imshow(x_test[i])
plt.xlabel(class_names[y_test[i][0]])
plt.show()

"""リスト5-24"""

def disp_hidden_data(data, w):
    plt.figure(figsize=(12,8))
    num = data.shape[2]
    for i in range(num):
        plt.subplot(int(num/w) + 1, w, i+1)
        plt.xticks([])
        plt.yticks([])
        plt.imshow(data[:,:,i], cmap="Blues")
# 0 : conv2d
disp_hidden_data(outputs[0][i], 8)

"""リスト5-25"""

# 1 : max_pooling2d
disp_hidden_data(outputs[1][i], 8)