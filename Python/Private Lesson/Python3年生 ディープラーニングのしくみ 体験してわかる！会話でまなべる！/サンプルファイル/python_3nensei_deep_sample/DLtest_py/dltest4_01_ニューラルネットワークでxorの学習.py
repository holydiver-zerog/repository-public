# -*- coding: utf-8 -*-
"""DLtest4-01 ニューラルネットワークでXORの学習.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mUNzF7_kXDs1aqMi4uha4HZE0QiBJZ2j

# **4.01 ニューラルネットワークでXORの学習**

# 【データの準備と確認】

リスト4-1：（リストA）
"""

!pip install japanize-matplotlib
import japanize_matplotlib
import matplotlib.pyplot as plt
import numpy as np
import keras
from keras import layers

"""リスト4-2"""

input_data = [[0, 0], [1, 0], [0, 1], [1, 1]]
xor_data = [0, 1, 1, 0]
x_train = x_test = np.array(input_data)
y_train = y_test = np.array(xor_data)

print("学習データ（問題）：")
print(x_train)
print(f"学習データ（答え）：{y_train}")

"""# 【モデルを作って学習】

リスト4-3
"""

model = keras.models.Sequential()
model.add(layers.Dense(8, activation="relu", input_dim=2))
model.add(layers.Dense(8, activation="relu"))
model.add(layers.Dense(2, activation="softmax"))
model.summary()

"""リスト4-4：（リストB）"""

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])
history = model.fit(x_train, y_train, epochs=500,
                    validation_data=(x_test, y_test))
test_loss, test_acc =model.evaluate(x_test, y_test)
print(f"テストデータの正解率は{test_acc:.2%}です。")

"""リスト4-5：（リストC）"""

param = [["正解率", "accuracy", "val_accuracy"],
          ["誤差", "loss", "val_loss"]]
plt.figure(figsize=(10,4))
for i in range(2):
    plt.subplot(1, 2, i+1)
    plt.title(param[i][0])
    plt.plot(history.history[param[i][1]], "o-")
    plt.plot(history.history[param[i][2]], "o-")
    plt.xlabel("学習回数")
    plt.legend(["訓練","テスト"], loc="best")
    if i==0:
        plt.ylim([0,1])
plt.show()

"""# 【データを渡して予測】

リスト4-6
"""

pre = model.predict(x_test)
print(pre)

"""リスト4-7"""

for i in range(4):
    index = np.argmax(pre[i])
    print(f"入力は{x_test[i]}、出力は{index}")