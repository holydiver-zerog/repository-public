# -*- coding: utf-8 -*-
"""DLtest2 パーセプトロンを作ってみよう.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V3jtNnJqblM9y-NQHaVosQFnhx9rOjmP

# **2.01　ANDをパーセプトロンで作る**

リスト2-1
"""

X1 = [0,1,0,1]
X2 = [0,0,1,1]

def test(x1, x2):
    if x1 == 1 and x2 == 1:
        return 1
    else:
        return 0

def disp_results(func):
    for i in range(4):
        Y = func(X1[i], X2[i])
        print(f"{X1[i]}, {X2[i]} = {Y}")

disp_results(test)

"""リスト2-2"""

def and_test(x1, x2):
    w1, w2, theta = 0.5, 0.5, 0.8
    ans = w1 * x1 + w2 * x2
    if ans > theta:
        return 1
    else:
        return 0

disp_results(and_test)

"""リスト2-3"""

import numpy as np
import matplotlib.pyplot as plt

def fillscolors(data):
    return "#ffc2c2" if data > 0 else "#c6dcec"
def dotscolors(data):
    return "#ff0e0e" if data > 0 else "#1f77b4"

def plot_perceptron(func, X1, X2):
    plt.figure(figsize=(6, 6))
    XX, YY = np.meshgrid(
        np.linspace(-0.25, 1.25, 200),
        np.linspace(-0.25, 1.25, 200))
    XX = np.array(XX).flatten()
    YY = np.array(YY).flatten()
    fills = []
    colors = []
    for i in range(len(XX)):
        fills.append(func(XX[i], YY[i]))
        colors.append(fillscolors(fills[i]))
    plt.scatter(XX, YY, c=colors)

    dots = []
    colors = []
    for i in range(len(X1)):
        dots.append(func(X1[i], X2[i]))
        colors.append(dotscolors(dots[i]))
    plt.scatter(X1, X2, c=colors)
    plt.xlabel("X1")
    plt.ylabel("X2")
    plt.show()

"""リスト2-4"""

plot_perceptron(and_test, X1, X2)

"""# **2.02　ORをパーセプトロンで作る**

リスト2-5
"""

def or_test(x1, x2):
    w1, w2, theta = 0.5, 0.5, 0.2
    ans = w1 * x1 + w2 * x2
    if ans > theta:
        return 1
    else:
        return 0

disp_results(or_test)

"""リスト2-6"""

plot_perceptron(or_test, X1, X2)

"""## **2.03　NANDをパーセプトロンで作る**

リスト2-7
"""

def nand_test(x1, x2):
    w1, w2, theta = -0.5, -0.5, -0.8
    ans = w1 * x1 + w2 * x2
    if ans > theta:
        return 1
    else:
        return 0

disp_results(nand_test)

"""リスト2-8"""

plot_perceptron(nand_test, X1, X2)

"""# **2.04　XORをパーセプトロンで作る**

リスト2-9
"""

def other_test(x1, x2):
    w1, w2, theta = 0.7, -0.3, 0.2
    ans = w1 * x1 + w2 * x2
    if ans > theta:
        return 1
    else:
        return 0

disp_results(other_test)

"""リスト2-10"""

plot_perceptron(other_test, X1, X2)

"""リスト2-11"""

def xor_test(x1, x2):
    if or_test(x1, x2) > 0:
        s1 = 1
    else:
        s1 = 0
    if nand_test(x1, x2) > 0:
        s2 = 1
    else:
        s2 = 0
    ans = and_test(s1, s2)
    if ans > 0:
        return 1
    else:
        return 0

disp_results(xor_test)

"""リスト2-12"""

plot_perceptron(xor_test, X1, X2)

"""# **2.05 活性化関数**

リスト2-13
"""

import numpy as np
import matplotlib.pyplot as plt

def step_func(x):
    return np.where(x>0, 1, 0)
x1 = np.linspace(-5, 5, 500)
y1 = step_func(x1)

plt.plot(x1, y1)
plt.legend(["step"], loc="best")
plt.yticks(np.arange(0, 1.2, step=0.5))
plt.grid()
plt.show()

"""リスト2-14"""

def sigmoid_func(x):
    return 1/(1+np.exp(-x))
x2 = np.linspace(-5, 5)
y2 = sigmoid_func(x2)

plt.plot(x1, y1)
plt.plot(x2, y2)
plt.legend(["step", "sigmoid"], loc="best")
plt.yticks(np.arange(0, 1.2, step=0.5))
plt.grid()
plt.show()

"""リスト2-15"""

def tanh_func(x):
    return np.tanh(x)
x3 = np.linspace(-5, 5)
y3 = tanh_func(x3)

plt.plot(x1, y1)
plt.plot(x2, y2)
plt.plot(x3, y3)
plt.legend(["step", "sigmoid", "tanh"], loc="best")
plt.yticks(np.arange(-1, 1.2, step=0.5))
plt.grid()
plt.show()

"""リスト2-16"""

def relu_func(x):
    return np.where(x>0, x, 0)
x4 = np.linspace(-5, 5)
y4 = relu_func(x4)

plt.plot(x1, y1)
plt.plot(x2, y2)
plt.plot(x3, y3)
plt.plot(x4, y4)
plt.legend(["step", "sigmoid", "tanh", "ReLU"], loc="best")
plt.yticks(np.arange(-1, 5.2, step=0.5))
plt.grid()
plt.show()