# 文字数を調べる
print("IT基礎1章_1：ITエンジニアの心構え")
w = "案件の課題解決における内容を他人事にはせず、当事者意識を持つ、その背景としては、課題を理解しなければ、問題の解決に向けた提案、プロセスが明確化されないため。課題や提案方法が不明であれば、責任感を持って、積極的に仲間内だけではなく、顧客含めたメンバーに対し、質疑応答や相談を実施する行動力が必要なため。"
print(len(w))
# ↓
print("↓")
w = "案件の課題解決を他人事にはせず、課題を理解しなければ、問題の解決に向けた提案、プロセスが明確化されないため、積極的に顧客含めたメンバーに対し、質疑応答や相談を実施する行動力が必要なため。"
print(len(w))
#
w = "メンバー内で、精度の高い案件の情報共有(状況、進捗および活動内容等)を随時または定期的に実施し、信頼関係を得、プロジェクトを円滑に進める必要があるため。"
print(len(w))
#
w = "業務プロセス等の安全性や効率化において、危険予知、業務改善の気づきや、その課題を解決するための体制、対策および管理を実現することで堅牢性の担保、コストやスケジュールの削減が可能となるため。"
print(len(w))
#
print("IT基礎1章_2：コミュニケーションで大切なこと")
w = "誤った情報伝達や情報共有では、プロジェクト全体の遅延や顧客とのトラブルおよび信頼関係を失うため、お互いの理解度を確認し合う定例会等を含めた情報共有の場を設け、エビデンスを必ず残すかたちでのコミュニケーションを行い、手戻りや言った言わないのトラブルを防止し、精度の高い情報を社内、社外問わず、伝達することで信頼を勝ち得える。また、問題等が生じた場合は、速やかに報告し合う体制作りも重要となる。"
print(len(w))
#
w = "信頼関係を築けない案件は失敗する。なぜならば、正しい情報や精度の高い情報を得られないため、円滑なコミュニケーションが難しく、信頼関係を得るには、挨拶や身だしなみを意識した第一印象を軽視せず、ヒアリングを通じ、相手への配慮も忘れず(言葉使いや共感等)、観察／分析(性格、趣味、スキルセット等)を行いつつ、必要な情報を引き出しながら、意識合わせを行い、約束事は必ず守る姿勢で信頼を勝ち得る必要がある。"
print(len(w))
#
print("IT基礎1章_3：エンジニア的な質問のしかた")
w = "自力で解決するにはコストパフォーマンスが悪く、この先に控えている作業や開発工程に遅れが生じる可能性があり、不明点をそのままにするのではなく、早急に理解し対応を行う必要がある。また、プロジェクトは一人ではなく、チームとして行うことが多く、自分自身の作業が止まってしまうと、他のメンバーの作業や全体の開発工程に遅れが生じる等の影響を与える可能性があるため、スケジュール厳守は必須である。"
print(len(w))
#
w = "相手に質問をする際、自分自身が何が不明で、かつ、適切な状況と内容を伝えないと、相手も混乱してしまい、不信感を抱かれ、信頼関係の問題に発展する可能性があるため、5W1Hを例に、「いつ」 、 「どこで」 、 「誰が」 、 「何を」 、 「どのように」と理解度を整理し、明確な情報を正確に伝える必要がある。また、内容によっては、参考になるものを求めたり、アドバイスを頂くかたちでの発信も検討する。"
print(len(w))
#
w = "丸投げで回答をえるのではなく、きちんと自分自身も考えた上での結果を表すためにも必要である。なぜなら、自ら複数の結果を用意し判断を仰ぐのであれば、相手も親身に対応いただける可能性が非常に高くなる。また、同じ質問を繰り返さない予防にも繋がり、高感度な印象を与えられる。ただし、無理をして複数の結果を準備する必要はない。"
print(len(w))
#
print("IT基礎2章_1：システム開発工程について")
w = "システム開発における開発工程は大変重要なものであり、各工程を顧客と意識合わせを行い、全てに合意を得て進めることが必須である。各工程がおろそかであれば、仕様通りに開発が行われない、スケジュールに間に合わない等の事象が発生し、顧客との認識ズレによるトラブルの発生要因となるリスクがある。最悪の場合、顧客の信頼を失い、全工程、または、各工程での手戻りが発生し、顧客だけではなく、プロジェクトメンバーへの影響や負担が大きくなり、無駄に多くのリソースを投入するかたちとなる。開発工程には、上流工程(要求定義・要件定義・外部設計) 、下流工程(内部設計・製造/実装・テスト工程・リリース・運用保守)が存在するが、上流工程は、主にプロジェクトマネージャー、プロジェクトリーダーが担当、下流工程は、SEが担当するケースが多く、プログラミング開発においては、下流工程となる。"
print(len(w))
# ↓
print("IT基礎2章_2：ウォーターフォール開発とアジャイル開発について")
w = "昔から馴染みのある開発モデル、やり直し/手直しがないコンセンプトで、品質担保、想定外なことが生じにくい、リソース確保、スケジュール管理がしやすい等のメリットはあるが、現実問題として、開発工程において修正等が発生しないプロジェクトは存在しないため、この点を認識し考慮する必要がある。"
print(len(w))
# ↓
print("↓")
w = "昔から馴染みのあるモデル、やり直し/手直しがないコンセンプトで、品質担保、想定外なことが生じにくい、リソース確保、スケジュール管理がしやすい等のメリットはあるが、手戻りが生じた場合、影響が大きい。"
print(len(w))
#
w = "近年流行りのモデル、やり直し/手直しが前提のコンセプトで、顧客ファースト、スピード重視のメリットはあるが、、品質担保、リソース確保、スケジュール管理が難しく、顧客との齟齬が生じやすい。"
print(len(w))
#
print("IIT基礎3章_3：セキュリティの考え方について")
w = "セキュリティ対策を怠ると、情報漏洩やサイバー攻撃による業務停止、損害賠償請求などが発生し、企業の競争力を低下させる可能性があります。セキュリティ対策に対する重要性を各自が自覚/認識し責任を持ち、ガバナンス強化とシステム開発におけるセキュリティのフレームワークを実装する必要もあります。情報漏洩やサイバー攻撃が生じると、企業の場合、顧客や取引先からの信頼失墜、損害賠償、ブランドイメージの低下等による経営不振等が考えられる。個人の場合は、個人情報が不正利用される可能性、金銭被害、犯罪被害等が考えられる。ヒューマンエラー防止策としては、USBメモリー等の記録媒体、個人用PCやタブレット端末等を持ち込まない、資料や情報を持ち出さない等の徹底した周知、認識と教育実施、フレームワークとしては、例えば、DevSecOpsの採用を検討してみるのもセキュリティ強化の一環ともなる。"
print(len(w))
#