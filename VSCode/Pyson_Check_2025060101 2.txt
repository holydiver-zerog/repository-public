
・演算子

//  わり算(小数部分を切り捨て)
%   わり算の余り

・基本

順次
分岐
反復

・主なデータ型

数値(整数型)                int       # 個数や順番に使う
数値(浮動小数点数型)         float     # 一般的な計算に使う
文字列型                    str       # 文字(列)を扱うときに使う
ブール型                    bool      # True(真)か、False(偽)かの二択のときに使う

・命令

変数:
変数名 = 値                 # 変数を使って値を入れる
print(変数名)               # 変数の中身を表示する

インデント:
半角スペース4文字分 or タブ

文字列をつなぐ:
+

文字数を調べる:
len(文字列)

文字列の一部分を取り出す:     # 0から始まる番号(左から)、-1から始まる番号(右から)
文字列[位置A]               # 位置Aの1文字
文字列[位置A:位置B]          # 位置Aから位置Bの直前までの範囲の文字列
文字列[:位置B]              # 先導から位置Bの直前までの範囲の文字列
文字列[位置A:]              # 位置Aから末尾までの範囲の文字列

文字列の途中で改行:
\n                         # バックスラッシュ Windowsは、¥、macOSは、option + ¥

データ型を変換:
int(文字列)                 # 文字列型を、整数型に変換する
float(文字列)               # 文字列型を、浮動小数点数型に変換する
str(文字列)                 # 数値型や浮動小数点数型を、文字列型に変換する

その変数は正しく数値に変換できるのか？:
isdigit()                  # できる場合:True、できない場合:False

リスト:                     # データをたくさん使うときは「変数」ではなく、「リスト」を使う
リスト名 = [要素1,要素2,要素3, ...]     # リストを作る
print(リスト名[インデックス])           # リストの要素を表示する、インデックスは0から始まるs

比較演算子:
==                          # 左辺が右辺と同じ
!=                          # 左辺が右辺と違う
<                           # 左辺が右辺より小さい
<=                          # 左辺が右辺以下
>                           # 左辺が右辺より大きい
>=                          # 左辺が右辺以上

if else文:
if 条件式 :
    条件が正しいときにする処理
else :
    条件式が正しくないときにする処理

if文:
if 条件式A:
    条件式Aが正しいときにする処理1
elif 条件式B:
    条件式Aが正しくなくて、条件式Bが正しいときにする処理2
else:
    どちらも正しくないときにする処理3

for文(回数を指定):
for カウント変数 in range(回数):
    くり返す処理

for文(リストを指定)
for 要素を入れる変数 in リスト:
    くり返す処理

for文(入れ子)
for カウント変数1 in range(回数):
    for カウント変数2 in range(回数):
        くり返す処理

関数の作り方:
def 関数名():
    関数で行う処理

関数の作り方(引数と、戻り値がある場合):
def 関数名(引数1,引数2,...):
    関数で行う処理
    return 戻り値

インポートする方法:
import モジュール名
↓
importしたモジュールの関数を実行する方法:
モジュール名.関数名
↓
モジュール名を省略名とする:
import モジュール名 as 省略名
↓
関数名の前のモジュール名を書かずに済ませる方法:
from モジュール名 import *


標準モジュール:              # importで使用できる
数値計算        math        random
日付や時刻      datetime    time        calendar
データファイル   csv         json
ユーザーインターフェース       tkinter

コメント(1行):
#

コメント(複数行):
'''
コメント1
コメント2
'''

or

"""
コメント1
コメント2
"""


・演算子

//  わり算(小数部分を切り捨て)
%   わり算の余り

・基本

順次
分岐
反復

・主なデータ型

数値(整数型)                int       # 個数や順番に使う
数値(浮動小数点数型)         float     # 一般的な計算に使う
文字列型                    str       # 文字(列)を扱うときに使う
ブール型                    bool      # True(真)か、False(偽)かの二択のときに使う

・命令

変数:
変数名 = 値                 # 変数を使って値を入れる
print(変数名)               # 変数の中身を表示する

インデント:
半角スペース4文字分 or タブ

文字列をつなぐ:
+

文字数を調べる:
len(文字列)

文字列の一部分を取り出す:     # 0から始まる番号(左から)、-1から始まる番号(右から)
文字列[位置A]               # 位置Aの1文字
文字列[位置A:位置B]          # 位置Aから位置Bの直前までの範囲の文字列
文字列[:位置B]              # 先導から位置Bの直前までの範囲の文字列
文字列[位置A:]              # 位置Aから末尾までの範囲の文字列

文字列の途中で改行:
\n                         # バックスラッシュ Windowsは、¥、macOSは、option + ¥

データ型を変換:
int(文字列)                 # 文字列型を、整数型に変換する
float(文字列)               # 文字列型を、浮動小数点数型に変換する
str(文字列)                 # 数値型や浮動小数点数型を、文字列型に変換する

その変数は正しく数値に変換できるのか？:
isdigit()                  # できる場合:True、できない場合:False

リスト:                     # データをたくさん使うときは「変数」ではなく、「リスト」を使う
リスト名 = [要素1,要素2,要素3, ...]     # リストを作る
print(リスト名[インデックス])           # リストの要素を表示する、インデックスは0から始まるs

比較演算子:
==                          # 左辺が右辺と同じ
!=                          # 左辺が右辺と違う
<                           # 左辺が右辺より小さい
<=                          # 左辺が右辺以下
>                           # 左辺が右辺より大きい
>=                          # 左辺が右辺以上

if else文:
if 条件式 :
    条件が正しいときにする処理
else :
    条件式が正しくないときにする処理

if文:
if 条件式A:
    条件式Aが正しいときにする処理1
elif 条件式B:
    条件式Aが正しくなくて、条件式Bが正しいときにする処理2
else:
    どちらも正しくないときにする処理3

for文(回数を指定):
for カウント変数 in range(回数):
    くり返す処理

for文(リストを指定)
for 要素を入れる変数 in リスト:
    くり返す処理

for文(入れ子)
for カウント変数1 in range(回数):
    for カウント変数2 in range(回数):
        くり返す処理

関数の作り方:
def 関数名():
    関数で行う処理

関数の作り方(引数と、戻り値がある場合):
def 関数名(引数1,引数2,...):
    関数で行う処理
    return 戻り値

インポートする方法:
import モジュール名
↓
importしたモジュールの関数を実行する方法:
モジュール名.関数名
↓
モジュール名を省略名とする:
import モジュール名 as 省略名
↓
関数名の前のモジュール名を書かずに済ませる方法:
from モジュール名 import *


標準モジュール:              # importで使用できる
数値計算        math        random
日付や時刻      datetime    time        calendar
データファイル   csv         json
ユーザーインターフェース       tkinter

コメント(1行):
#

コメント(複数行):
'''
コメント1
コメント2
'''

or

"""
コメント1
コメント2
"""

・演算子

//  わり算(小数部分を切り捨て)
%   わり算の余り

・基本

順次
分岐
反復

・主なデータ型

数値(整数型)                int        個数や順番に使う
数値(浮動小数点数型)         float      一般的な計算に使う
文字列型                    str       文字(列)を扱うときに使う
ブール型                    bool      True(真)か、False(偽)かの二択のときに使う

・命令

変数:
変数名 = 値                 # 変数を使って値を入れる
print(変数名)               # 変数の中身を表示する

文字列をつなぐ:
+

文字数を調べる:
len(文字列)

文字列の一部分を取り出す:     # 0から始まる番号
文字列[位置A]               # 位置Aの1文字
文字列[位置A:位置B]          # 位置Aから位置Bの直前までの範囲の文字列
文字列[:位置B]              # 先導から位置Bの直前までの範囲の文字列
文字列[位置A:]              # 位置Aから末尾までの範囲の文字列

・主なデータ型

数値(整数型)                int       # 個数や順番に使う
数値(浮動小数点数型)         float     # 一般的な計算に使う
文字列型                    str       # 文字(列)を扱うときに使う
ブール型                    bool      # True(真)か、False(偽)かの二択のときに使う

・命令

変数:
変数名 = 値                 # 変数を使って値を入れる
print(変数名)               # 変数の中身を表示する

インデント:
半角スペース4文字分 or タブ

文字列をつなぐ:
+

文字数を調べる:
len(文字列)

文字列の一部分を取り出す:     # 0から始まる番号(左から)、-1から始まる番号(右から)
文字列[位置A]               # 位置Aの1文字
文字列[位置A:位置B]          # 位置Aから位置Bの直前までの範囲の文字列
文字列[:位置B]              # 先導から位置Bの直前までの範囲の文字列
文字列[位置A:]              # 位置Aから末尾までの範囲の文字列

文字列の途中で改行:
\n                         # バックスラッシュ Windowsは、¥、macOSは、option + ¥

データ型を変換:
int(文字列)                 # 文字列型を、整数型に変換する
float(文字列)               # 文字列型を、浮動小数点数型に変換する
str(文字列)                 # 数値型や浮動小数点数型を、文字列型に変換する

その変数は正しく数値に変換できるのか？:
isdigit()                  # できる場合:True、できない場合:False

リスト:                     # データをたくさん使うときは「変数」ではなく、「リスト」を使う
リスト名 = [要素1,要素2,要素3, ...]     # リストを作る
print(リスト名[インデックス])           # リストの要素を表示する、インデックスは0から始まるs

比較演算子:
==                          # 左辺が右辺と同じ
!=                          # 左辺が右辺と違う
<                           # 左辺が右辺より小さい
<=                          # 左辺が右辺以下
>                           # 左辺が右辺より大きい
>=                          # 左辺が右辺以上

if else文:
if 条件式 :
    条件が正しいときにする処理
else :
    条件式が正しくないときにする処理

if文:
if 条件式A:
    条件式Aが正しいときにする処理1
elif 条件式B:
    条件式Aが正しくなくて、条件式Bが正しいときにする処理2
else:
    どちらも正しくないときにする処理3

for文(回数を指定):
for カウント変数 in range(回数):
    くり返す処理

for文(リストを指定)
for 要素を入れる変数 in リスト:
    くり返す処理

for文(入れ子)
for カウント変数1 in range(回数):
    for カウント変数2 in range(回数):
        くり返す処理

関数の作り方:
def 関数名():
    関数で行う処理

関数の作り方(引数と、戻り値がある場合):
def 関数名(引数1,引数2,...):
    関数で行う処理
    return 戻り値

インポートする方法:
import モジュール名
↓
importしたモジュールの関数を実行する方法:
モジュール名.関数名
↓
モジュール名を省略名とする:
import モジュール名 as 省略名
↓
関数名の前のモジュール名を書かずに済ませる方法:
from モジュール名 import *


標準モジュール:              # importで使用できる
数値計算        math        random
日付や時刻      datetime    time        calendar
データファイル   csv         json
ユーザーインターフェース       tkinter

コメント(1行):
#

コメント(複数行):
'''
コメント1
コメント2
'''

or

"""
コメント1
コメント2
"""


random      同じプログラムでも実行するたびに違う結果が出る
choice
float
input
forward
back
left
right
turtle
shape
done
for
range
col
color
circle
scorelist


